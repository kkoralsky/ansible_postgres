---
- block:
  - name: create archive dest
    file: name='{{ postgres_replication.archive_dest }}' state=directory
          owner=postgres group=postgres
  - name: enable rsyncd daemon 
    lineinfile: path=/etc/default/rsync regexp='^RSYNC_ENABLE=' line='RSYNC_ENABLE=true'
  - name: create rsync destination definition for WAL archive
    template: src=rsyncd.j2 dest=/etc/rsyncd.conf
    notify: restart rsyncd
  - name: make sure rsync daemon is running
    service: name=rsync state=started
  when:
    - postgres_replication
    - postgres_replication.archive_dest is defined

- block:
  - name: stop the cluster
    command: 'pg_ctlclutster {{ postgres_version }} main stop'
    register: stop_cluster
    failed_when: stop_cluster.rc not in [0, 2]
  - name: purge db data directory
    file: name='{{ postgres_data_directory }}/' state=absent
  - name: recreate db data directory
    file: name='{{ postgres_data_directory }}' state=directory
          owner=postgres group=postgres
  - name: launch pg_basebackup to catch up from master
    shell: | 
      su -c '{% if postgres_basebackup_spawn|bool %}nohup {% endif %}/usr/lib/postgresql/{{ postgres_version }}/bin/pg_basebackup \
      -D{{ postgres_data_directory }} -Ureplication -h{{ postgres_replication.primary_host }} --verbose \
        {% if postgres_replication.primary_port is defined %}-p{{ postgres_replication.primary_port }}{% endif %} \
        > ~/basebackup.log 2> ~/basebackup.log {% if postgres_basebackup_spawn|bool %} &{% endif %}' postgres
    environment: {PGPASSWORD: '{{ postgres_replication.password|default("") }}'}
    register: pg_basebackup
    notify: restart dbserver
    ignore_errors: yes
  when: postgres_basebackup|bool

- name: configure recovery
  template: src=recovery.conf.j2 dest='{{ postgres_data_directory }}/recovery.conf'
            owner=postgres group=postgres
  notify: restart dbserver
