---
- name: add roles
  postgresql_user:
    name: '{{ item.name }}'
    password: '{{ item.pass|default(omit) }}'
    port: '{{ postgres_port }}'
    role_attr_flags: '{{ item.privs|default("") }}'
  loop: '{{ postgres_roles }}' 

- name: add replication role
  postgresql_user: name=replication password='{{ postgres_replication.password|default(omit) }}'
                   port='{{ postgres_port }}' role_attr_flags=REPLICATION
  when: postgres_replication

- name: create dbs
  postgresql_db: name='{{ item.name }}' owner='{{ item.owner }}' port='{{ postgres_port }}'
  with_items: '{{ postgres_dbs }}'

- name: add extensions
  postgresql_ext: name={{ item.1 }} db='{{ item.0.name }}' port='{{ postgres_port }}'
  loop: '{{ postgres_dbs|subelements("exts", skip_missing=True) }}'

- name: add more db priviledges
  postgresql_privs: roles='{{ item.1.roles }}' type='{{ item.1.type|default("table") }}'
                    objs='{{ item.1.objs|default("ALL_IN_SCHEMA") }}' db='{{ item.0.name }}'
                    privs='{{ item.1.privs|default("ALL") }}'
  loop: '{{ postgres_dbs|subelements("privs", skip_missing=True) }}'

- name: ensure dump archive destination exists
  file: name='{{ postgres_dump_dest }}' state=directory recurse=yes
  tags: postgres_restore

- name: rsync databases dumps
  synchronize: src='{{ item.dump }}' dest='{{ postgres_dump_dest }}/'
  when: item.dump is defined
  loop: '{{ postgres_dbs }}'
  tags: postgres_restore

- name: restore database dump
  command: |
    /usr/lib/postgresql/{{ postgres_version }}/bin/pg_restore -U{{ item.owner }} \
      -d{{ item.name }} --jobs={{ ansible_processor_vcpus }} -p{{ postgres_port }}
      {% if postgres_modern_version %} --if-exists{% endif %} {{ postgres_dump_dest }}/{{ item.dump|basename }}
  when:
    - item.dump is defined
    - postgres_do_restore|bool
  loop: '{{ postgres_dbs }}'
  tags: postgres_restore
